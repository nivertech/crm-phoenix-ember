- name: "Install environment"
  tags: setup
  hosts: production
  tasks:
    - name: "Erlang solutions key"
      apt_key: url="http://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc"
    - name: "Erlang solutions repo"
      apt_repository: repo="deb http://packages.erlang-solutions.com/ubuntu trusty contrib"
    - name: "Install elixir"
      apt: name=elixir update_cache=yes
    - name: "Install postgres"
      apt: name=postgresql
    - name: "Set simple password :o"
      shell: sudo -u postgres psql -U postgres -d postgres -c "CREATE ROLE root SUPERUSER LOGIN PASSWORD 'qwerty';"
      failed_when: False
    - name: "Install git"
      apt: name=git-core
- name: "Deploy"
  tags: deploy
  hosts: production
  vars:
    mix_env:
      MIX_ENV: prod
      PORT: 5000
    app_version: "0.0.1"
  tasks:
    - name: "Get code"
      git: repo=git://github.com/sevos/crm-phoenix-ember.git dest=/build accept_hostkey=True force=yes
    - name: "Install hex"
      shell: echo "Y" | mix local.hex
      args:
        chdir: /build/app
    - name: "Install rebar"
      shell: echo "Y" | mix local.rebar
      args:
        chdir: /build/app
    - name: "Build"
      shell: mix do deps.get, compile, release
      args:
        chdir: /build/app
      environment: mix_env
    - name: "Create release directory"
      file: path=/app state=directory
      register: bootstrap
    - name: "Create initial release"
      unarchive: src=/build/app/rel/crm/crm-{{ app_version }}.tar.gz dest=/app copy=no
      when: bootstrap.changed
    - name: "Test if app is already running"
      shell: /app/bin/crm ping
      failed_when: False
      register: ping
    - name: "Create database"
      shell: mix ecto.create
      args:
        chdir: /build/app
      environment: mix_env
    - name: "Migrate database"
      shell: mix ecto.migrate
      args:
        chdir: /build/app
      environment: mix_env
    - name: "Start the app"
      shell: /app/bin/crm start
      when: not "pong" in ping.stdout
      environment: mix_env
    - name: "Prepare release"
      shell: "mv /build/app/rel/crm/crm-{{ app_version}}.tar.gz /app/releases"
      when: '"pong" in ping.stdout'
    - name: "Upgrade app"
      shell: /app/bin/crm upgrade "{{app_version}}"
      when: '"pong" in ping.stdout'
